/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$icon-arrow-down-name: 'icon-arrow-down';
$icon-arrow-down-x: 93px;
$icon-arrow-down-y: 32px;
$icon-arrow-down-offset-x: -93px;
$icon-arrow-down-offset-y: -32px;
$icon-arrow-down-width: 25px;
$icon-arrow-down-height: 16px;
$icon-arrow-down-total-width: 125px;
$icon-arrow-down-total-height: 92px;
$icon-arrow-down-image: '../sprite.png';
$icon-arrow-down: (93px, 32px, -93px, -32px, 25px, 16px, 125px, 92px, '../sprite.png', 'icon-arrow-down', );
$icon-fb-name: 'icon-fb';
$icon-fb-x: 33px;
$icon-fb-y: 60px;
$icon-fb-offset-x: -33px;
$icon-fb-offset-y: -60px;
$icon-fb-width: 32px;
$icon-fb-height: 32px;
$icon-fb-total-width: 125px;
$icon-fb-total-height: 92px;
$icon-fb-image: '../sprite.png';
$icon-fb: (33px, 60px, -33px, -60px, 32px, 32px, 125px, 92px, '../sprite.png', 'icon-fb', );
$icon-google-name: 'icon-google';
$icon-google-x: 60px;
$icon-google-y: 0px;
$icon-google-offset-x: -60px;
$icon-google-offset-y: 0px;
$icon-google-width: 33px;
$icon-google-height: 32px;
$icon-google-total-width: 125px;
$icon-google-total-height: 92px;
$icon-google-image: '../sprite.png';
$icon-google: (60px, 0px, -60px, 0px, 33px, 32px, 125px, 92px, '../sprite.png', 'icon-google', );
$icon-linkedin-name: 'icon-linkedin';
$icon-linkedin-x: 0px;
$icon-linkedin-y: 60px;
$icon-linkedin-offset-x: 0px;
$icon-linkedin-offset-y: -60px;
$icon-linkedin-width: 33px;
$icon-linkedin-height: 32px;
$icon-linkedin-total-width: 125px;
$icon-linkedin-total-height: 92px;
$icon-linkedin-image: '../sprite.png';
$icon-linkedin: (0px, 60px, 0px, -60px, 33px, 32px, 125px, 92px, '../sprite.png', 'icon-linkedin', );
$icon-youtube-name: 'icon-youtube';
$icon-youtube-x: 93px;
$icon-youtube-y: 0px;
$icon-youtube-offset-x: -93px;
$icon-youtube-offset-y: 0px;
$icon-youtube-width: 32px;
$icon-youtube-height: 32px;
$icon-youtube-total-width: 125px;
$icon-youtube-total-height: 92px;
$icon-youtube-image: '../sprite.png';
$icon-youtube: (93px, 0px, -93px, 0px, 32px, 32px, 125px, 92px, '../sprite.png', 'icon-youtube', );
$mobile-menu-name: 'mobile-menu';
$mobile-menu-x: 0px;
$mobile-menu-y: 0px;
$mobile-menu-offset-x: 0px;
$mobile-menu-offset-y: 0px;
$mobile-menu-width: 60px;
$mobile-menu-height: 60px;
$mobile-menu-total-width: 125px;
$mobile-menu-total-height: 92px;
$mobile-menu-image: '../sprite.png';
$mobile-menu: (0px, 0px, 0px, 0px, 60px, 60px, 125px, 92px, '../sprite.png', 'mobile-menu', );
$spritesheet-width: 125px;
$spritesheet-height: 92px;
$spritesheet-image: '../sprite.png';
$spritesheet-sprites: ($icon-arrow-down, $icon-fb, $icon-google, $icon-linkedin, $icon-youtube, $mobile-menu, );
$spritesheet: (125px, 92px, '../sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
